// Code generated by mockery v2.43.2. DO NOT EDIT.

package mocks

import (
	context "context"

	exception "github.com/RumbiaID/pkg-library/app/pkg/exception"
	external "github.com/RumbiaID/pkg-library/app/pkg/external"

	mock "github.com/stretchr/testify/mock"
)

// AuditSvcExternal is an autogenerated mock type for the AuditSvcExternal type
type AuditSvcExternal struct {
	mock.Mock
}

// CreateAudit provides a mock function with given fields: ctx, model
func (_m *AuditSvcExternal) CreateAudit(ctx context.Context, model *external.RequestAuditCreate) *exception.Exception {
	ret := _m.Called(ctx, model)

	if len(ret) == 0 {
		panic("no return value specified for CreateAudit")
	}

	var r0 *exception.Exception
	if rf, ok := ret.Get(0).(func(context.Context, *external.RequestAuditCreate) *exception.Exception); ok {
		r0 = rf(ctx, model)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*exception.Exception)
		}
	}

	return r0
}

// NewAuditSvcExternal creates a new instance of AuditSvcExternal. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuditSvcExternal(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuditSvcExternal {
	mock := &AuditSvcExternal{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
